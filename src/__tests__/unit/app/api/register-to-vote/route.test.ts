import { POST } from '@/app/api/register-to-vote/route';
import { NextRequest } from 'next/server';
import { ServerError } from '@/errors/server-error';
import { serverContainer } from '@/services/server/container';
import { saveActualImplementation } from '@/utils/test/save-actual-implementation';
import { Builder } from 'builder-pattern';
import { SERVER_SERVICE_KEYS } from '@/services/server/keys';
import { DateTime } from 'luxon';
import { UserType } from '@/model/enums/user-type';
import { v4 as uuid } from 'uuid';
import { VoterRegistrationForm } from '@/app/register/voter-registration-form';
import type { ValueOf } from 'fully-formed';
import type { Auth } from '@/services/server/auth/auth';
import type { User } from '@/model/types/user';
import type { UserRepository } from '@/services/server/user-repository/user-repository';
import type { VoterRegistrationDataRepository } from '@/services/server/voter-registration-data-repository/voter-registration-data-repository';

describe('POST', () => {
  const getActualService = saveActualImplementation(serverContainer, 'get');

  it(`saves the pdfUrl generated by the RTV api in the database and awards the 
  user a badge.`, async () => {
    const user: User = {
      uid: '0',
      email: 'user@example.com',
      name: 'User',
      avatar: '0',
      type: UserType.Challenger,
      completedActions: {
        electionReminders: false,
        registerToVote: false,
        sharedChallenge: false,
      },
      completedChallenge: false,
      badges: [],
      contributedTo: [],
      challengeEndTimestamp: DateTime.now().plus({ days: 8 }).toUnixInteger(),
      inviteCode: 'test-invite-code',
    };

    const savePDFUrl = jest.fn();
    const awardVoterRegistrationBadge = jest
      .fn()
      .mockImplementationOnce(() => Promise.resolve(user));

    const containerSpy = jest
      .spyOn(serverContainer, 'get')
      .mockImplementation(key => {
        if (key.name === SERVER_SERVICE_KEYS.Auth.name) {
          return Builder<Auth>()
            .loadSessionUser(() => Promise.resolve(user))
            .build();
        } else if (key.name === SERVER_SERVICE_KEYS.UserRepository.name) {
          return Builder<UserRepository>()
            .awardRegisterToVoteBadge(awardVoterRegistrationBadge)
            .build();
        } else if (
          key.name === SERVER_SERVICE_KEYS.VoterRegistrationDataRepository.name
        ) {
          return Builder<VoterRegistrationDataRepository>()
            .savePDFUrl(savePDFUrl)
            .build();
        }
        return getActualService(key);
      });

    const pdfUrl = 'test';

    const fetchSpy = jest
      .spyOn(globalThis, 'fetch')
      .mockImplementationOnce(() => {
        return Promise.resolve(
          new Response(
            JSON.stringify({
              pdfurl: pdfUrl,
              uid: uuid(),
            }),
            {
              status: 200,
            },
          ),
        );
      });

    const registerBody: ValueOf<InstanceType<typeof VoterRegistrationForm>> = {
      eligibility: {
        email: user.email,
        zip: '94043',
        dob: '01-01-2000',
        isCitizen: true,
        eighteenPlus: true,
        firstTimeRegistrant: false,
      },
      names: {
        yourName: {
          title: 'Mr.',
          first: 'Test',
          middle: '',
          last: 'User',
          suffix: '',
        },
      },
      addresses: {
        homeAddress: {
          streetLine1: '1600 Amphitheatre Pkwy',
          streetLine2: '',
          city: 'Mountain View',
          state: 'CA',
          zip: '94043',
          phone: '',
          phoneType: 'Mobile',
        },
      },
      otherDetails: {
        party: 'Independent',
        race: 'Decline to state',
        hasStateLicenseOrID: true,
        idNumber: '0000',
        receiveEmailsFromRTV: true,
        receiveSMSFromRTV: true,
      },
    };

    const request = new NextRequest(
      'https://challenge.8by8.us/register-to-vote',
      {
        method: 'POST',
        body: JSON.stringify(registerBody),
      },
    );

    const response = await POST(request);
    expect(response.status).toBe(200);
    expect(savePDFUrl).toHaveBeenCalledWith(user.uid, pdfUrl);
    expect(awardVoterRegistrationBadge).toHaveBeenCalledWith(user.uid);
    containerSpy.mockRestore();
    fetchSpy.mockRestore();
  });

  it('returns a response with a status of 401 when the user is signed out.', async () => {
    const containerSpy = jest
      .spyOn(serverContainer, 'get')
      .mockImplementation(key => {
        if (key.name === SERVER_SERVICE_KEYS.Auth.name) {
          return Builder<Auth>()
            .loadSessionUser(() => Promise.resolve(null))
            .build();
        }
        return getActualService(key);
      });

    const registerBody: ValueOf<InstanceType<typeof VoterRegistrationForm>> = {
      eligibility: {
        email: 'user@example.com',
        zip: '94043',
        dob: '01-01-2000',
        isCitizen: true,
        eighteenPlus: true,
        firstTimeRegistrant: false,
      },
      names: {
        yourName: {
          title: 'Mr.',
          first: 'Test',
          middle: '',
          last: 'User',
          suffix: '',
        },
      },
      addresses: {
        homeAddress: {
          streetLine1: '1600 Amphitheatre Pkwy',
          streetLine2: '',
          city: 'Mountain View',
          state: 'CA',
          zip: '94043',
          phone: '',
          phoneType: 'Mobile',
        },
      },
      otherDetails: {
        party: 'Independent',
        race: 'Decline to state',
        hasStateLicenseOrID: true,
        idNumber: '0000',
        receiveEmailsFromRTV: true,
        receiveSMSFromRTV: true,
      },
    };

    const request = new NextRequest(
      'https://challenge.8by8.us/register-to-vote',
      {
        method: 'POST',
        body: JSON.stringify(registerBody),
      },
    );

    const response = await POST(request);
    expect(response.status).toBe(401);
    containerSpy.mockRestore();
  });

  it(`returns a response with a status code matching that of a caught
  ServerError when one is thrown while attempting to insert voter registration
  data.`, async () => {
    const user: User = {
      uid: '0',
      email: 'user@example.com',
      name: 'User',
      avatar: '0',
      type: UserType.Challenger,
      completedActions: {
        electionReminders: false,
        registerToVote: false,
        sharedChallenge: false,
      },
      completedChallenge: false,
      badges: [],
      contributedTo: [],
      challengeEndTimestamp: DateTime.now().plus({ days: 8 }).toUnixInteger(),
      inviteCode: 'test-invite-code',
    };

    const containerSpy = jest
      .spyOn(serverContainer, 'get')
      .mockImplementation(key => {
        if (key.name === SERVER_SERVICE_KEYS.Auth.name) {
          return Builder<Auth>()
            .loadSessionUser(() => Promise.resolve(user))
            .build();
        } else if (
          key.name === SERVER_SERVICE_KEYS.VoterRegistrationDataRepository.name
        ) {
          return Builder<VoterRegistrationDataRepository>()
            .savePDFUrl(() => {
              throw new ServerError('Failed to save PDF.', 422);
            })
            .build();
        }
        return getActualService(key);
      });

    const fetchSpy = jest
      .spyOn(globalThis, 'fetch')
      .mockImplementationOnce(() => {
        return Promise.resolve(
          new Response(JSON.stringify({ pdfurl: 'test', uid: uuid() }), {
            status: 200,
          }),
        );
      });

    const registerBody: ValueOf<InstanceType<typeof VoterRegistrationForm>> = {
      eligibility: {
        email: user.email,
        zip: '94043',
        dob: '01-01-2000',
        isCitizen: true,
        eighteenPlus: true,
        firstTimeRegistrant: false,
      },
      names: {
        yourName: {
          title: 'Mr.',
          first: 'Test',
          middle: '',
          last: 'User',
          suffix: '',
        },
      },
      addresses: {
        homeAddress: {
          streetLine1: '1600 Amphitheatre Pkwy',
          streetLine2: '',
          city: 'Mountain View',
          state: 'CA',
          zip: '94043',
          phone: '',
          phoneType: 'Mobile',
        },
      },
      otherDetails: {
        party: 'Independent',
        race: 'Decline to state',
        hasStateLicenseOrID: true,
        idNumber: '0000',
        receiveEmailsFromRTV: true,
        receiveSMSFromRTV: true,
      },
    };

    const request = new NextRequest(
      'https://challenge.8by8.us/register-to-vote',
      {
        method: 'POST',
        body: JSON.stringify(registerBody),
      },
    );

    const response = await POST(request);
    expect(response.status).toBe(422);

    const responseBody = await response.json();
    expect(responseBody.error).toBe('Failed to save PDF.');
    containerSpy.mockRestore();
    fetchSpy.mockRestore();
  });

  it(`returns a response with a status of 400 when the request body contains 
  invalid data.`, async () => {
    const user: User = {
      uid: '0',
      email: 'user@example.com',
      name: 'User',
      avatar: '0',
      type: UserType.Challenger,
      completedActions: {
        electionReminders: false,
        registerToVote: false,
        sharedChallenge: false,
      },
      completedChallenge: false,
      badges: [],
      contributedTo: [],
      challengeEndTimestamp: DateTime.now().plus({ days: 8 }).toUnixInteger(),
      inviteCode: 'test-invite-code',
    };

    const containerSpy = jest
      .spyOn(serverContainer, 'get')
      .mockImplementation(key => {
        if (key.name === SERVER_SERVICE_KEYS.Auth.name) {
          return Builder<Auth>()
            .loadSessionUser(() => Promise.resolve(user))
            .build();
        }
        return getActualService(key);
      });

    const registerBody = {
      eligibility: {
        email: user.email,
        zip: '94043',
        dob: '01-01-2000',
        isCitizen: 'yes',
        eighteenPlus: true,
        firstTimeRegistrant: false,
      },
      names: {
        yourName: {
          title: 'Mr.',
          first: 'Test',
          middle: '',
          last: 'User',
          suffix: '',
        },
      },
      addresses: {
        homeAddress: {
          streetLine1: '1600 Amphitheatre Pkwy',
          streetLine2: '',
          city: 'Mountain View',
          state: 'CA',
          zip: '94043',
          phone: '',
          phoneType: 'Mobile',
        },
      },
      otherDetails: {
        party: 'Independent',
        race: 'Decline to state',
        hasStateLicenseOrID: true,
        idNumber: '0000',
        receiveEmailsFromRTV: true,
        receiveSMSFromRTV: true,
      },
    };

    const request = new NextRequest(
      'https://challenge.8by8.us/register-to-vote',
      {
        method: 'POST',
        body: JSON.stringify(registerBody),
      },
    );

    const response = await POST(request);
    expect(response.status).toBe(400);
    containerSpy.mockRestore();
  });

  it(`returns a response with a status of 400 when the request body is missing a
  required property.`, async () => {
    const user: User = {
      uid: '0',
      email: 'user@example.com',
      name: 'User',
      avatar: '0',
      type: UserType.Challenger,
      completedActions: {
        electionReminders: false,
        registerToVote: false,
        sharedChallenge: false,
      },
      completedChallenge: false,
      badges: [],
      contributedTo: [],
      challengeEndTimestamp: DateTime.now().plus({ days: 8 }).toUnixInteger(),
      inviteCode: 'test-invite-code',
    };

    const containerSpy = jest
      .spyOn(serverContainer, 'get')
      .mockImplementation(key => {
        if (key.name === SERVER_SERVICE_KEYS.Auth.name) {
          return Builder<Auth>()
            .loadSessionUser(() => Promise.resolve(user))
            .build();
        }
        return getActualService(key);
      });

    // missing state key
    const registerBody = {
      eligibility: {
        email: user.email,
        zip: '94043',
        dob: '01-01-2000',
        isCitizen: true,
        eighteenPlus: true,
        firstTimeRegistrant: false,
      },
      names: {
        yourName: {
          title: 'Mr.',
          first: 'Test',
          middle: '',
          last: 'User',
          suffix: '',
        },
      },
      addresses: {
        homeAddress: {
          streetLine1: '1600 Amphitheatre Pkwy',
          streetLine2: '',
          city: 'Mountain View',
          zip: '94043',
          phone: '',
          phoneType: 'Mobile',
        },
      },
      otherDetails: {
        party: 'Independent',
        race: 'Decline to state',
        hasStateLicenseOrID: true,
        idNumber: '0000',
        receiveEmailsFromRTV: true,
        receiveSMSFromRTV: true,
      },
    };

    const request = new NextRequest(
      'https://challenge.8by8.us/register-to-vote',
      {
        method: 'POST',
        body: JSON.stringify(registerBody),
      },
    );

    const response = await POST(request);
    expect(response.status).toBe(400);
    containerSpy.mockRestore();
  });

  it(`returns a response with the status returned by the fetch request to the 
  registration endpoint when the request is unsuccessful.`, async () => {
    const user: User = {
      uid: '0',
      email: 'user@example.com',
      name: 'User',
      avatar: '0',
      type: UserType.Challenger,
      completedActions: {
        electionReminders: false,
        registerToVote: false,
        sharedChallenge: false,
      },
      completedChallenge: false,
      badges: [],
      contributedTo: [],
      challengeEndTimestamp: DateTime.now().plus({ days: 8 }).toUnixInteger(),
      inviteCode: 'test-invite-code',
    };

    const containerSpy = jest
      .spyOn(serverContainer, 'get')
      .mockImplementation(key => {
        if (key.name === SERVER_SERVICE_KEYS.Auth.name) {
          return Builder<Auth>()
            .loadSessionUser(() => Promise.resolve(user))
            .build();
        }

        return getActualService(key);
      });

    const fetchSpy = jest
      .spyOn(globalThis, 'fetch')
      .mockImplementationOnce(() => {
        return Promise.resolve(
          new Response(
            JSON.stringify({ error: 'dob must be in the form mm-dd-yyyy' }),
            {
              status: 400,
            },
          ),
        );
      });

    const registerBody: ValueOf<InstanceType<typeof VoterRegistrationForm>> = {
      eligibility: {
        email: user.email,
        zip: '94043',
        dob: '2000-01-01',
        isCitizen: true,
        eighteenPlus: true,
        firstTimeRegistrant: false,
      },
      names: {
        yourName: {
          title: 'Mr.',
          first: 'Test',
          middle: '',
          last: 'User',
          suffix: '',
        },
      },
      addresses: {
        homeAddress: {
          streetLine1: '1600 Amphitheatre Pkwy',
          streetLine2: '',
          city: 'Mountain View',
          state: 'CA',
          zip: '94043',
          phone: '',
          phoneType: 'Mobile',
        },
      },
      otherDetails: {
        party: 'Independent',
        race: 'Decline to state',
        hasStateLicenseOrID: true,
        idNumber: '0000',
        receiveEmailsFromRTV: true,
        receiveSMSFromRTV: true,
      },
    };

    const request = new NextRequest(
      'https://challenge.8by8.us/register-to-vote',
      {
        method: 'POST',
        body: JSON.stringify(registerBody),
      },
    );

    const response = await POST(request);
    expect(response.status).toBe(400);
    containerSpy.mockRestore();
    fetchSpy.mockRestore();
  });

  it(`returns a response with a status of 500 if any type of error other than a
  ServerError or ZodError is caught.`, async () => {
    const user: User = {
      uid: '0',
      email: 'user@example.com',
      name: 'User',
      avatar: '0',
      type: UserType.Challenger,
      completedActions: {
        electionReminders: false,
        registerToVote: false,
        sharedChallenge: false,
      },
      completedChallenge: false,
      badges: [],
      contributedTo: [],
      challengeEndTimestamp: DateTime.now().plus({ days: 8 }).toUnixInteger(),
      inviteCode: 'test-invite-code',
    };

    const containerSpy = jest
      .spyOn(serverContainer, 'get')
      .mockImplementation(key => {
        if (key.name === SERVER_SERVICE_KEYS.Auth.name) {
          return Builder<Auth>()
            .loadSessionUser(() => Promise.resolve(user))
            .build();
        } else if (key.name === SERVER_SERVICE_KEYS.UserRepository.name) {
          return Builder<UserRepository>().build();
        } else if (
          key.name === SERVER_SERVICE_KEYS.VoterRegistrationDataRepository.name
        ) {
          return Builder<VoterRegistrationDataRepository>().build();
        }
        return getActualService(key);
      });

    const request = Builder<NextRequest>()
      .json(() => {
        throw new Error('Badly formatted JSON');
      })
      .build();

    const response = await POST(request);
    expect(response.status).toBe(500);

    containerSpy.mockRestore();
  });
});
